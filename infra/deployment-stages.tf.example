# Two-stage deployment approach for handling frontend-backend URL dependency

# This file demonstrates the recommended deployment approach:
# 1. First deploy backend infrastructure
# 2. Get backend URL from outputs  
# 3. Deploy frontend with the backend URL

## Stage 1: Deploy Backend Only

# Uncomment this and comment out the frontend module in main.tf for initial deployment:

/*
terraform {
  required_version = ">= 1.0"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
  }
}

# Deploy only backend first
module "backend_only_container_app" {
  source = "./modules/container_app"
  
  resource_group_name           = azurerm_resource_group.main.name
  location                     = azurerm_resource_group.main.location
  project_name                 = var.project_name
  app_name                     = "backend"
  container_apps_environment_id = module.container_apps_environment.environment_id
  
  container_image = "${module.container_registry.registry_login_server}/vibe-backend:latest"
  container_port  = 8000
  
  environment_variables = [
    {
      name  = "ENVIRONMENT"
      value = "production"
    }
  ]
  
  secret_environment_variables = [
    {
      name            = "OPENAI_API_KEY"
      key_vault_id    = module.key_vault.key_vault_id
      secret_name     = "openai-api-key"
    }
  ]
  
  managed_identity_id = module.managed_identity.backend_identity_id
  
  cpu_requests    = "0.5"
  memory_requests = "1Gi"
  
  tags = var.common_tags
}

output "backend_url_for_frontend" {
  description = "Use this URL for the frontend VITE_API_URL"
  value       = "https://${module.backend_only_container_app.app_fqdn}"
}
*/

## Stage 2: Deploy Frontend with Backend URL

# After stage 1, use the backend URL from outputs to deploy frontend
# Update your terraform.tfvars with:
# backend_api_url = "<backend-url-from-stage-1-output>"